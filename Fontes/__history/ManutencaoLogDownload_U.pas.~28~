unit ManutencaoLogDownload_U;

interface

type
  TManutencaoLogDownload = class(TObject)
  private
    class function GetProximoCodigoDisponivel: Integer;
  public
    class function GravarLogDownload(Url: String): Integer;
    class procedure AtualizarDataTerminoDownload(Id: Integer);
  end;

  const
    SQLInsert = 'INSERT INTO LOGDOWNLOAD (CODIGO, URL, DATAINICIO) VALUES (%d, %s, %s)';
    SQLUpdate = 'UPDATE LOGDOWNLOAD SET DATAFIM=%s WHERE CODIGO=%d';

implementation

uses
  System.SysUtils,
  FireDAC.Comp.Client,
  ConexaoSQLite_U;

{ TManutencaoLogDownload }

class function TManutencaoLogDownload.GetProximoCodigoDisponivel: Integer;
var
  ADados: TFDQuery;
begin
  try
    ADados := TFDQuery.Create(nil);
    try
      DataModule.FDConnection.Connected := True;
      ADados.Connection := DataModule.FDConnection;
      ADados.Open('SELECT COALESCE(MAX(CODIGO),0)+1 AS CODIGO FROM LOGDOWNLOAD');
      Result := ADados.FieldByName('CODIGO').AsInteger;
    finally
      DataModule.FDConnection.Connected := False;
      FreeAndNil(ADados);
    end;
  except on E: Exception do
    raise Exception.Create('Não foi possível pegar o próximo sequencial da Tabela!');
  end;
end;

class function TManutencaoLogDownload.GravarLogDownload(Url: String): Integer;
var
  CodigoLog: Integer;

  function GetSQLFormatado: String;
  begin
    Result := Format(SQLInsert, [CodigoLog,
                                 QuotedStr(Url),
                                 QuotedStr(DateToStr(Now))]);
  end;

begin
  CodigoLog := GetProximoCodigoDisponivel;
  try
    try
      DataModule.FDConnection.Connected := True;
      DataModule.ExecSQL(GetSQLFormatado);
      Result := CodigoLog;
    finally
      DataModule.FDConnection.Connected := False
    end;
  except on E: Exception do
    raise Exception.Create('Não foi Possível Incluir o Log do Download!');
  end;
end;

class procedure TManutencaoLogDownload.AtualizarDataTerminoDownload(Id: Integer);

  function GetSQLFormatado: String;
  begin
    Result := Format(SQLUpdate, [QuotedStr(DateToStr(Now)),Id]);
  end;

begin
  try
    try
      DataModule.FDConnection.Connected := True;
      DataModule.FDConnection.ExecSQL(GetSQLFormatado);
    finally
      DataModule.FDConnection.Connected := False;
    end;
  except on E: Exception do
    raise Exception.Create('Não foi possível Atualizar a DataFim!');
  end;
end;

end.
